# Fluentd設定ファイル
# FX Trading System ログ集約・転送設定

# ログレベル設定
<system>
  log_level info
  suppress_repeated_stacktrace true
  emit_error_log_interval 30s
  suppress_config_dump
  without_source
</system>

# ワーカー設定
<worker 0>
  # アプリケーションログの収集
  <source>
    @type tail
    @id fx_backend_logs
    path /var/log/fx_trading/backend/*.log
    pos_file /var/log/fluentd-buffers/fx_backend.log.pos
    tag fx.backend
    <parse>
      @type json
      time_key timestamp
      time_format %Y-%m-%d %H:%M:%S.%L
      keep_time_key true
    </parse>
    refresh_interval 5s
    read_from_head true
    rotate_wait 5s
    enable_watch_timer true
    enable_stat_watcher false
  </source>

  # フロントエンドログの収集
  <source>
    @type tail
    @id fx_frontend_logs
    path /var/log/fx_trading/frontend/*.log
    pos_file /var/log/fluentd-buffers/fx_frontend.log.pos
    tag fx.frontend
    <parse>
      @type json
      time_key timestamp
      time_format %Y-%m-%d %H:%M:%S.%L
      keep_time_key true
    </parse>
    refresh_interval 5s
    read_from_head true
  </source>

  # PostgreSQLログの収集
  <source>
    @type tail
    @id postgresql_logs
    path /var/log/fx_trading/postgres/*.log
    pos_file /var/log/fluentd-buffers/postgresql.log.pos
    tag fx.database.postgresql
    <parse>
      @type multiline
      format_firstline /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}/
      format1 /^(?<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) \[(?<pid>\d+)\] (?<level>\w+): (?<message>.*)/
      time_key timestamp
      time_format %Y-%m-%d %H:%M:%S.%L
    </parse>
    refresh_interval 10s
  </source>

  # Nginxアクセスログの収集
  <source>
    @type tail
    @id nginx_access_logs
    path /var/log/fx_trading/nginx/access.log
    pos_file /var/log/fluentd-buffers/nginx_access.log.pos
    tag fx.nginx.access
    <parse>
      @type nginx
      time_format %d/%b/%Y:%H:%M:%S %z
    </parse>
    refresh_interval 5s
  </source>

  # Nginxエラーログの収集
  <source>
    @type tail
    @id nginx_error_logs
    path /var/log/fx_trading/nginx/error.log
    pos_file /var/log/fluentd-buffers/nginx_error.log.pos
    tag fx.nginx.error
    <parse>
      @type regexp
      expression /^(?<timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?<level>\w+)\] (?<pid>\d+)#(?<tid>\d+): (?<message>.*)/
      time_key timestamp
      time_format %Y/%m/%d %H:%M:%S
    </parse>
  </source>

  # Celeryログの収集
  <source>
    @type tail
    @id celery_logs
    path /var/log/fx_trading/celery/*.log
    pos_file /var/log/fluentd-buffers/celery.log.pos
    tag fx.celery
    <parse>
      @type json
      time_key timestamp
      time_format %Y-%m-%d %H:%M:%S.%L
    </parse>
  </source>

  # Dockerコンテナログの収集
  <source>
    @type forward
    @id docker_logs
    port 24224
    bind 0.0.0.0
  </source>

  # システムログの収集（syslog）
  <source>
    @type syslog
    @id system_syslog
    port 5140
    bind 0.0.0.0
    tag fx.system
    <parse>
      @type syslog
    </parse>
  </source>
</worker>

# ログのフィルタリング・加工
<filter fx.**>
  @type record_transformer
  @id add_hostname
  <record>
    hostname "#{Socket.gethostname}"
    environment "production"
    service_name "fx-trading-system"
  </record>
</filter>

# エラーログの特別処理
<filter fx.**.error>
  @type record_transformer
  @id error_enrichment
  <record>
    severity ERROR
    alert_required true
  </record>
</filter>

# 取引関連ログの特別処理
<filter fx.backend>
  @type grep
  @id trading_logs
  <regexp>
    key message
    pattern /trading|order|position|mt5/i
  </regexp>
  <record>
    log_type trading
    priority high
  </record>
</filter>

# セキュリティログの特別処理
<filter fx.nginx.access>
  @type grep
  @id security_logs
  <regexp>
    key message
    pattern /401|403|404|500|login|auth/i
  </regexp>
  <record>
    log_type security
    priority high
  </record>
</filter>

# ログ送信先設定
<match fx.**>
  @type copy
  
  # Elasticsearchへの送信（オプション）
  <store>
    @type elasticsearch
    @id elasticsearch_output
    host elasticsearch
    port 9200
    logstash_format true
    logstash_prefix fx-trading
    logstash_dateformat %Y.%m.%d
    include_tag_key true
    type_name _doc
    tag_key @log_name
    flush_interval 10s
    
    <buffer>
      @type file
      path /var/log/fluentd-buffers/elasticsearch
      flush_mode interval
      retry_type exponential_backoff
      flush_thread_count 2
      flush_interval 5s
      retry_forever true
      retry_max_interval 30
      chunk_limit_size 2M
      queue_limit_length 8
      overflow_action block
    </buffer>
  </store>
  
  # PostgreSQLへの送信（ログ保存用）
  <store>
    @type sql
    @id postgresql_output
    host postgres
    port 5432
    database fx_trading
    adapter postgresql
    username fx_user
    password "#{ENV['DB_PASSWORD']}"
    
    <table>
      table system_logs
      column_mapping 'timestamp:timestamp,level:level,message:message,tag:tag,hostname:hostname'
      # カラム: id, timestamp, level, message, tag, hostname, service_name, environment
    </table>
    
    <buffer>
      @type file
      path /var/log/fluentd-buffers/postgresql
      flush_mode interval
      flush_interval 30s
      chunk_limit_size 1M
    </buffer>
  </store>
  
  # ファイル出力（バックアップ用）
  <store>
    @type file
    @id file_output
    path /var/log/fx_trading/aggregated/fx-trading.%Y%m%d.log
    append true
    time_slice_format %Y%m%d
    time_slice_wait 10m
    time_format %Y-%m-%d %H:%M:%S
    
    <buffer time>
      @type file
      path /var/log/fluentd-buffers/file
      timekey 1d
      timekey_wait 10m
      timekey_use_utc true
    </buffer>
    
    <format>
      @type json
    </format>
  </store>
  
  # アラート送信（重要ログ用）
  <store>
    @type grep
    @id alert_filter
    <regexp>
      key level
      pattern ERROR|CRITICAL|ALERT
    </regexp>
    
    <store>
      @type http
      @id webhook_alert
      endpoint "#{ENV['SLACK_WEBHOOK_URL']}"
      http_method post
      serializer json
      open_timeout 2
      read_timeout 5
      
      <format>
        @type json
      </format>
      
      <buffer>
        @type memory
        flush_interval 1s
        chunk_limit_size 1M
      </buffer>
    </store>
  </store>
</match>

# システムメトリクス監視
<source>
  @type monitor_agent
  @id monitor_agent_input
  bind 0.0.0.0
  port 24220
</source>

# Prometheusメトリクス出力
<source>
  @type prometheus
  @id prometheus_metrics
  bind 0.0.0.0
  port 24231
  metrics_path /metrics
</source>

<source>
  @type prometheus_output_monitor
  @id prometheus_output_monitor
  interval 10
  <labels>
    host "#{Socket.gethostname}"
    environment production
  </labels>
</source>

# デバッグ用出力
<match debug.**>
  @type stdout
  @id debug_output
</match>

# 例外処理（マッチしなかったログ）
<match **>
  @type null
  @id null_output
</match>