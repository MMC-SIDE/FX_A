# FX Trading System - 本番環境用 Docker Compose
version: '3.8'

services:
  # バックエンドAPI
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: fx_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://fx_user:${DB_PASSWORD}@postgres:5432/fx_trading
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - MT5_CONFIG_PATH=/app/config/mt5_config.json
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fx_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # フロントエンド
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fx_frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=https://api.fx-trading.local
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - fx_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL + TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: fx_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=fx_trading
      - POSTGRES_USER=fx_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=ja_JP.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/timescale_setup.sql:/docker-entrypoint-initdb.d/02-timescale.sql
      - ./backups:/backups
    networks:
      - fx_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fx_user -d fx_trading"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  # Redis
  redis:
    image: redis:7-alpine
    container_name: fx_redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - fx_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx リバースプロキシ
  nginx:
    image: nginx:alpine
    container_name: fx_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - fx_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery ワーカー（バックグラウンドタスク）
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fx_celery
    restart: unless-stopped
    command: celery -A backend.tasks worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://fx_user:${DB_PASSWORD}@postgres:5432/fx_trading
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fx_network
    healthcheck:
      test: ["CMD", "celery", "-A", "backend.tasks", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat（定期タスクスケジューラー）
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fx_celery_beat
    restart: unless-stopped
    command: celery -A backend.tasks beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://fx_user:${DB_PASSWORD}@postgres:5432/fx_trading
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - celery_beat_data:/app/celerybeat-schedule
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fx_network

  # Prometheus（メトリクス収集）
  prometheus:
    image: prom/prometheus:latest
    container_name: fx_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - fx_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana（可視化）
  grafana:
    image: grafana/grafana:latest
    container_name: fx_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=https://grafana.fx-trading.local
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - fx_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager（アラート管理）
  alertmanager:
    image: prom/alertmanager:latest
    container_name: fx_alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - fx_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ログ集約（オプション）
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: fx_fluentd
    restart: unless-stopped
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/fx_trading
      - fluentd_data:/var/log/fluentd-buffers
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - fx_network
    depends_on:
      - postgres

# 永続化ボリューム
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  fluentd_data:
    driver: local
  nginx_cache:
    driver: local
  celery_beat_data:
    driver: local

# ネットワーク設定
networks:
  fx_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16